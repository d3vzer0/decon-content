id: 67af1633-311f-4a94-bc8f-f904a54637b2
name: Suspicious activity of STS token related to ECS
description: |
  'Suspicious activity of the STS token of an EC2 machine hosted by ECS (for example, by SSRF) indicates a possible token hijacking. An attacker may have stolen the token and could abuse its permissions to escalate privileges and move laterally in the cloud account.'
severity: High
requiredDataConnectors:
  - connectorId: AWS
    dataTypes:
      - AWSCloudTrail
tactics:
  - Credential Access
relevantTechniques:
  - T1528
query: |
    let aws_public_ips = externaldata(prefixes: string)
    [ 
        h@'https://aka.ms/awspublicipaddresse/aws-public-ip-addresses/ip-ranges.json'
    ]
    with(format='multijson');
    let timeframe = 30m;
    let lookback = 12h;
    //Get the AccessKey in the STS token (IMDS) when EC2 service assumes the Role periodically
    let sts_token = AWSCloudTrail
    | where TimeGenerated >= ago (lookback)
    | where EventSource == "sts.amazonaws.com" and SourceIpAddress == "ec2.amazonaws.com"
    | extend instanceId = tostring(parse_json(RequestParameters).roleSessionName)
    | extend token = tostring(parse_json(ResponseElements).credentials.accessKeyId);
    //Identify if the EC2 belongs to ECS/EKS
    let typeOfEC2 = AWSCloudTrail
    | where TimeGenerated >= ago (lookback)
    | extend instanceId = tostring(split(UserIdentityPrincipalid, ":")[1])
    | join sts_token on instanceId
    | where UserAgent startswith "Amazon ECS Agent"
    | project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;
    //Get the identities who used that STS token - this can be the EC2 which assumed it (legit),
    //but it can also be an external identity (attacker) which abuses the token permissions 
    let tokenUsage = AWSCloudTrail
    | where TimeGenerated >= ago (timeframe)
    | join kind=inner typeOfEC2 on $left.UserIdentityAccessKeyId == $right.token
    | extend region = AWSRegion
    | project-away SourceIpAddress1, UserIdentityUserName1, UserIdentityArn1, TimeGenerated1;
    //Check whether the called identity is legit
    aws_public_ips
    | mv-expand todynamic(prefixes)
    | extend ip_prefix=tostring(todynamic(prefixes.['ip_prefix']))
    | extend region=tostring(todynamic(prefixes.['region']))
    | extend service=tostring(todynamic(prefixes.['service']))
    | project-away prefixes
    | where service == "EC2" 
    | join kind=inner tokenUsage on region
    | where SourceIpAddress !contains "amazonaws.com"
    | where ipv4_is_private(SourceIpAddress) == false
    | extend IsInRange = ipv4_is_in_range(SourceIpAddress, ip_prefix)
    | extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))
    | extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, AssumedRoleArn = UserIdentityArn
    | summarize timestamp=arg_max(timestamp,*), r = make_set(IsInRange) by SourceIpAddress, UserIdentityUserName, UserIdentityArn
    | where not (set_has_element(r, true))
    | project-away ip_prefix, IsInRange
entityMappings:
  - entityType: Account
    fieldMappings:
      - identifier: FullName
        columnName: AccountCustomEntity
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: IPCustomEntity
